# tasks/migrate/process_connect_domain.yml - Process DNS records for a connect domain

# Get existing DNS records for the domain
- name: Get existing DNS records for connect domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ connect_domain.zone_id | default(base_domain_cloudflare_zone_id) }}/dns_records"
    method: GET
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  register: domain_records

# Update existing A records if they exist
- name: Update existing A records for connect domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ connect_domain.zone_id | default(base_domain_cloudflare_zone_id) }}/dns_records/{{ item[0].id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ item[1] }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  with_nested:
    - "{{ domain_records.json.result | selectattr('type', 'equalto', 'A') | selectattr('name', 'equalto', source_kv_hostname) | list }}"
    - "{{ envoy_mappings[inventory_hostname].ipv4 }}"
  when:
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv4 is defined

# Create new A records if they don't exist
- name: Create new A records for connect domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ connect_domain.zone_id | default(base_domain_cloudflare_zone_id) }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ item }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  loop: "{{ envoy_mappings[inventory_hostname].ipv4 }}"
  when:
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv4 is defined
    - domain_records.json.result | selectattr('type', 'equalto', 'A') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0

# Update existing AAAA records if they exist
- name: Update existing AAAA records for connect domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ connect_domain.zone_id | default(base_domain_cloudflare_zone_id) }}/dns_records/{{ item[0].id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ item[1] }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  with_nested:
    - "{{ domain_records.json.result | selectattr('type', 'equalto', 'AAAA') | selectattr('name', 'equalto', source_kv_hostname) | list }}"
    - "{{ envoy_mappings[inventory_hostname].ipv6 }}"
  when:
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv6 is defined

# Create new AAAA records if they don't exist
- name: Create new AAAA records for connect domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ connect_domain.zone_id | default(base_domain_cloudflare_zone_id) }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ item }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  loop: "{{ envoy_mappings[inventory_hostname].ipv6 }}"
  when:
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv6 is defined
    - domain_records.json.result | selectattr('type', 'equalto', 'AAAA') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0

# Add fallback A record if no existing records and no envoy mappings
- name: Add fallback A record for connect domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ connect_domain.zone_id | default(base_domain_cloudflare_zone_id) }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ ansible_default_ipv4.address }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  when:
    - domain_records.json.result | selectattr('type', 'equalto', 'A') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0
    - (envoy_mappings is not defined or envoy_mappings[inventory_hostname] is not defined or envoy_mappings[inventory_hostname].ipv4 is not defined)
    - ansible_default_ipv4.address is defined

# Add fallback AAAA record if no existing records and no envoy mappings
- name: Add fallback AAAA record for connect domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ connect_domain.zone_id | default(base_domain_cloudflare_zone_id) }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ ansible_default_ipv6.address }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  when:
    - domain_records.json.result | selectattr('type', 'equalto', 'AAAA') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0
    - (envoy_mappings is not defined or envoy_mappings[inventory_hostname] is not defined or envoy_mappings[inventory_hostname].ipv6 is not defined)
    - ansible_default_ipv6.address is defined
