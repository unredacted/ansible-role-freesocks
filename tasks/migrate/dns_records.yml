# tasks/migrate/dns_records.yml - DNS record management tasks

# Get existing DNS records for base domain
- name: Get existing DNS records for base domain
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: GET
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  register: existing_dns_records
  run_once: true

# Update base domain DNS A records if they exist
- name: Update existing DNS A records for IPv4 addresses
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records/{{ item[0].id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ item[1] }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  with_nested:
    - "{{ existing_dns_records.json.result | selectattr('type', 'equalto', 'A') | selectattr('name', 'equalto', source_kv_hostname) | list }}"
    - "{{ envoy_mappings[inventory_hostname].ipv4 }}"
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv4 is defined

# Create new A records if they don't exist
- name: Create new DNS A records for IPv4 addresses
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ item }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  loop: "{{ envoy_mappings[inventory_hostname].ipv4 }}"
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv4 is defined
    - existing_dns_records.json.result | selectattr('type', 'equalto', 'A') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0

# Update base domain DNS AAAA records if they exist
- name: Update existing DNS AAAA records for IPv6 addresses
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records/{{ item[0].id }}"
    method: PUT
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ item[1] }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  with_nested:
    - "{{ existing_dns_records.json.result | selectattr('type', 'equalto', 'AAAA') | selectattr('name', 'equalto', source_kv_hostname) | list }}"
    - "{{ envoy_mappings[inventory_hostname].ipv6 }}"
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv6 is defined

# Create new AAAA records if they don't exist
- name: Create new DNS AAAA records for IPv6 addresses
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ item }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  loop: "{{ envoy_mappings[inventory_hostname].ipv6 }}"
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv6 is defined
    - existing_dns_records.json.result | selectattr('type', 'equalto', 'AAAA') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0

# Handle additional connect domains
- name: Process additional connect domains
  include_tasks: process_connect_domain.yml
  loop: "{{ additional_connect_domains | default([]) }}"
  loop_control:
    loop_var: connect_domain
  when:
    - inventory_hostname == destination_hostname
    - additional_connect_domains is defined

# Cleanup API and Prometheus domain records
- name: Get existing DNS records for API domain cleanup
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ cloudflare_zone_id }}/dns_records"
    method: GET
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  register: api_dns_records
  when:
    - inventory_hostname == destination_hostname
    - api_domain is defined
  run_once: true

- name: Delete existing DNS records for API and Prometheus domains
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ cloudflare_zone_id }}/dns_records/{{ item.id }}"
    method: DELETE
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  loop: "{{ api_dns_records.json.result }}"
  when:
    - inventory_hostname == destination_hostname
    - api_domain is defined
    - item.type == 'CNAME'
    - (item.name == source_kv_hostname + '-api.' + api_domain or item.name == source_kv_hostname + '-prom.' + prom_domain)
  run_once: true

# Fallback DNS records if no existing records found and no envoy mappings
- name: Add fallback DNS A record using server IP
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ ansible_default_ipv4.address }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  when: 
    - inventory_hostname == destination_hostname
    - (existing_dns_records.json.result | selectattr('type', 'equalto', 'A') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0)
    - (envoy_mappings is not defined or envoy_mappings[inventory_hostname] is not defined or envoy_mappings[inventory_hostname].ipv4 is not defined)
    - ansible_default_ipv4.address is defined

- name: Add fallback DNS AAAA record using server IP
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ ansible_default_ipv6.address }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  when: 
    - inventory_hostname == destination_hostname
    - (existing_dns_records.json.result | selectattr('type', 'equalto', 'AAAA') | selectattr('name', 'equalto', source_kv_hostname) | list | length == 0)
    - (envoy_mappings is not defined or envoy_mappings[inventory_hostname] is not defined or envoy_mappings[inventory_hostname].ipv6 is not defined)
    - ansible_default_ipv6.address is defined
