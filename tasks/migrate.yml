---
# tasks/migrate.yml - Migration tasks

- name: Verify source server exists
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_api_kv_namespace }}/values/{{ source_kv_hostname }}"
    method: GET
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: [200, 404]
  delegate_to: localhost
  register: source_server
  failed_when: false
  run_once: true

- name: Get source server Prometheus endpoint
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_prom_kv_namespace }}/values/{{ source_kv_hostname }}"
    method: GET
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: [200, 404]
  delegate_to: localhost
  register: source_prom
  failed_when: false
  run_once: true

- name: Stop Outline containers on source server
  docker_container:
    name: "{{ item }}"
    state: stopped
  loop:
    - watchtower
    - shadowbox
  become: yes
  when: inventory_hostname == source_hostname

# Set required variables for outline.yml
- name: Set variables for Outline installation
  set_fact:
    random_hostname: "{{ destination_kv_hostname }}"
    dns_hostname: "{{ destination_kv_hostname }}.{{ base_domain }}"
    kv_hostname: "{{ destination_kv_hostname }}"
  when: inventory_hostname == destination_hostname

- name: Debug hostname variables
  debug:
    msg:
      - "Random Hostname: {{ random_hostname }}"
      - "DNS Hostname: {{ dns_hostname }}"
      - "KV Hostname: {{ kv_hostname }}"
  when: inventory_hostname == destination_hostname

- name: Install Outline on new server
  include_tasks: outline.yml
  when: inventory_hostname == destination_hostname

- name: Include tunnel tasks
  include_tasks: tunnel.yml
  when: 
    - inventory_hostname == destination_hostname
    - outline_install_success | default(false) | bool

- name: Stop Outline containers on new server
  docker_container:
    name: "{{ item }}"
    state: stopped
  loop:
    - watchtower
    - shadowbox
  become: yes
  when: 
    - inventory_hostname == destination_hostname
    - outline_install_success | default(false) | bool

# File transfer tasks
- name: Create archive of Outline directory
  archive:
    path: /opt/outline
    dest: /tmp/outline.tar.gz
    format: gz
  become: yes
  when: inventory_hostname == source_hostname
  register: archive_created

- name: Fetch archive from source server
  fetch:
    src: /tmp/outline.tar.gz
    dest: "/tmp/outline-migration-{{ source_kv_hostname }}.tar.gz"
    flat: yes
  become: yes
  when: inventory_hostname == source_hostname
  register: fetch_completed

- name: Rename source Outline directory
  command: mv /opt/outline /opt/outline.migrated
  become: yes
  when: inventory_hostname == source_hostname

- name: Copy archive to destination server
  copy:
    src: "/tmp/outline-migration-{{ source_kv_hostname }}.tar.gz"
    dest: /tmp/outline.tar.gz
    mode: '0644'
    remote_src: no
  become: yes
  when: inventory_hostname == destination_hostname
  register: copy_completed

- name: Extract archive on destination server
  unarchive:
    src: /tmp/outline.tar.gz
    dest: /opt
    remote_src: yes
  become: yes
  when: inventory_hostname == destination_hostname
  register: extract_completed

- name: Clean up archive files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/tmp/outline.tar.gz"
  become: yes
  when: inventory_hostname == destination_hostname

- name: Replace source hostnames with destination hostnames in files
  replace:
    path: "{{ item }}"
    regexp: "{{ source_hostname }}"
    replace: "{{ destination_hostname }}"
  with_items:
    - "/opt/outline/access.txt"
    - "/opt/outline/persisted-state/shadowbox_server_config.json"
  become: yes
  when: inventory_hostname == destination_hostname

- name: Replace source KV hostnames with destination KV hostnames in files
  replace:
    path: "{{ item }}"
    regexp: "{{ source_kv_hostname }}"
    replace: "{{ destination_kv_hostname }}"
  with_items:
    - "/opt/outline/access.txt"
    - "/opt/outline/persisted-state/shadowbox_server_config.json"
  become: yes
  when: inventory_hostname == destination_hostname

# DNS and KV store tasks
- name: Update DNS A records for IPv4 addresses from envoy mappings
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: GET
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  register: existing_dns_records
  run_once: true

- name: Delete existing DNS records for source hostname
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records/{{ item.id }}"
    method: DELETE
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  loop: "{{ existing_dns_records.json.result | selectattr('name', 'equalto', source_kv_hostname) | list }}"
  when: 
    - existing_dns_records.json is defined
    - inventory_hostname == destination_hostname
  run_once: true

- name: Add DNS A records for IPv4 addresses from envoy mappings
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ item }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  loop: "{{ envoy_mappings[inventory_hostname].ipv4 }}"
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv4 is defined

- name: Add DNS AAAA records for IPv6 addresses from envoy mappings
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ item }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  loop: "{{ envoy_mappings[inventory_hostname].ipv6 }}"
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is defined
    - envoy_mappings[inventory_hostname] is defined
    - envoy_mappings[inventory_hostname].ipv6 is defined

# Fallback to server's own IPs if no envoy mappings are found
- name: Add fallback DNS A record using server IP
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: A
      name: "{{ destination_kv_hostname }}"
      content: "{{ ansible_default_ipv4.address }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is not defined or envoy_mappings[inventory_hostname] is not defined or envoy_mappings[inventory_hostname].ipv4 is not defined
    - ansible_default_ipv4.address is defined

- name: Add fallback DNS AAAA record using server IP
  uri:
    url: "{{ cloudflare_api_endpoint }}/zones/{{ base_domain_cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Content-Type: "application/json"
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body_format: json
    body:
      type: AAAA
      name: "{{ destination_kv_hostname }}"
      content: "{{ ansible_default_ipv6.address }}"
      ttl: 1
      proxied: false
    status_code: [200, 201]
  delegate_to: localhost
  when: 
    - inventory_hostname == destination_hostname
    - envoy_mappings is not defined or envoy_mappings[inventory_hostname] is not defined or envoy_mappings[inventory_hostname].ipv6 is not defined
    - ansible_default_ipv6.address is defined

- name: Start Outline containers on new server
  docker_container:
    name: "{{ item }}"
    state: started
  loop:
    - shadowbox
    - watchtower
  become: yes
  when: inventory_hostname == destination_hostname

- name: Check if KV entry already exists for new server
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_api_kv_namespace }}/values/{{ destination_kv_hostname }}"
    method: GET
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: [200, 404]
  delegate_to: localhost
  register: new_server_kv
  run_once: true

- name: Update API KV store with new hostname
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_api_kv_namespace }}/values/{{ destination_kv_hostname }}"
    method: PUT
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body: "{{ source_server.content | regex_replace(source_kv_hostname, destination_kv_hostname) }}"
    status_code: 200
  delegate_to: localhost
  when: 
    - source_server.status == 200
    - new_server_kv.status == 404
    - inventory_hostname == destination_hostname
  run_once: true

- name: Check if Prometheus KV entry already exists for new server
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_prom_kv_namespace }}/values/{{ destination_kv_hostname }}"
    method: GET
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: [200, 404]
  delegate_to: localhost
  register: new_server_prom_kv
  run_once: true

- name: Update Prometheus KV store with new hostname
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_prom_kv_namespace }}/values/{{ destination_kv_hostname }}"
    method: PUT
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    body: "{{ source_prom.content | regex_replace(source_kv_hostname, destination_kv_hostname) }}"
    status_code: 200
  delegate_to: localhost
  when: 
    - source_prom.status == 200
    - new_server_prom_kv.status == 404
    - inventory_hostname == destination_hostname
  run_once: true

- name: Delete source server API KV entry
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_api_kv_namespace }}/values/{{ source_kv_hostname }}"
    method: DELETE
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  when: 
    - migrate_delete_source | default(false) | bool
    - inventory_hostname == destination_hostname
  run_once: true

- name: Delete source server Prometheus KV entry
  uri:
    url: "{{ cloudflare_api_endpoint }}/accounts/{{ cloudflare_account_id }}/storage/kv/namespaces/{{ cloudflare_prom_kv_namespace }}/values/{{ source_kv_hostname }}"
    method: DELETE
    headers:
      X-Auth-Email: "{{ cloudflare_email }}"
      X-Auth-Key: "{{ cloudflare_api_token }}"
    status_code: 200
  delegate_to: localhost
  when: 
    - migrate_delete_source | default(false) | bool
    - inventory_hostname == destination_hostname
  run_once: true
